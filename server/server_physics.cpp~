/*
Czech_mate by Daniel
This file is part of Czech_mate.

Czech_mate is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License Version 2 as published by
the Free Software Foundation, 

Czech_mate is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Czech_mate.  If not, see <http://www.gnu.org/licenses/>.
*/
#include "server_main.h"
#include "server_physics.h"

extern int scan_model_for_id(int);
extern bool terminate;
static void coord_physics_iteration(coord_t*);

extern bool once_per_second;
extern loop_t server_loop_code;

namespace coord_input_functions{
	void forward(coord_t*);
	void backward(coord_t*);
	void left(coord_t*);
	void right(coord_t*);
	void up(coord_t*);
	void down(coord_t*);
}

void coord_input_functions::forward(coord_t *a){
	const long double y_sin = sin(a->y_angle);
	const long double y_cos = cos(a->y_angle);
	const long double x_cos = cos(a->x_angle);
	a->x_vel += y_sin*x_cos*a->physics_time;
	a->z_vel -= y_cos*x_cos*a->physics_time;
}

void coord_input_functions::backward(coord_t *a){
	const long double y_sin = sin(a->y_angle);
	const long double y_cos = cos(a->y_angle);
	const long double x_cos = cos(a->x_angle);
	a->x_vel -= y_sin*x_cos*a->physics_time;
	a->z_vel += y_cos*x_cos*a->physics_time;
}

void coord_input_functions::left(coord_t *a){
	const long double y_sin = sin(a->y_angle);
	const long double y_cos = cos(a->y_angle);
	a->x_vel -= y_cos*a->physics_time;
	a->z_vel -= y_sin*a->physics_time;
}

void coord_input_functions::right(coord_t *a){
	const long double y_sin = sin(a->y_angle);
	const long double y_cos = cos(a->y_angle);
	a->x_vel += y_cos*a->physics_time;
	a->z_vel += y_sin*a->physics_time;
}

void coord_input_functions::up(coord_t *a){
	const long double x_sin = sin(a->x_angle);
	a->x_vel += x_sin*a->physics_time;
}

void coord_input_functions::down(coord_t *a){
	const long double x_sin = sin(a->x_angle);
	a->x_vel -= x_sin*a->physics_time;
}

void physics_init(){
	loop_add(&server_loop_code, "physics engine", physics_engine);
}

void physics_close(){
	loop_del(&server_loop_code, physics_engine);
}

void coord_loop(array_id_t a){
	coord_t *a_ = (coord_t*)find_pointer(a, "coord_t");
	a_->array.data_lock.lock();
	coord_physics_iteration(a_);
	a_->array.data_lock.unlock();
}

void physics_engine(){
	once_per_second_update();
	std::vector<array_id_t> coord_vector = all_ids_of_type("coord_t");
	for(unsigned long int i = 0;i < coord_vector.size();i++){
		coord_loop(coord_vector[i]);
	}
}

static void coord_physics_iteration(coord_t *a){
	const long double time = get_time();
	a->physics_time = time-(a->old_time);
	a->old_time = time;
	if(a->mobile){
		a->x += a->x_vel*a->physics_time;
		a->y_vel += GRAVITY_RATE*a->physics_time;
		a->y += a->y_vel*a->physics_time;
		a->z += a->z_vel*a->physics_time;
		const long double pos_mul = 1/(1+(.9*a->physics_time));
		a->x_vel *= pos_mul;
		a->y_vel *= pos_mul;
		a->z_vel *= pos_mul;
	}
	a->x_angle += a->x_angle_vel*a->physics_time;
	a->y_angle += a->y_angle_vel*a->physics_time;
	const long double angle_mul = 1/(1+(.1*a->physics_time));
	a->x_angle_vel *= angle_mul;
	a->y_angle_vel *= angle_mul;
}
